using System.Linq;
using Content.Shared.Administration;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.LineEdit;

namespace Content.Client.Administration.UI.Tabs.AdminTab
{
    [GenerateTypedNameReferences]
    [UsedImplicitly]
    public sealed partial class JobBanWindow : DefaultWindow
    {
        public JobBanWindow()
        {
            RobustXamlLoader.Load(this);
            PlayerNameLine.OnTextChanged += _ => OnPlayerNameChanged();
            JobNameLine.OnTextChanged += _ => OnRoleNameChanged();
            PlayerList.OnSelectionChanged += OnPlayerSelectionChanged;
            SubmitButton.OnPressed += SubmitButtonOnPressed;
            MinutesLine.OnTextChanged += UpdateButtonsText;
            HourButton.OnPressed += _ => AddMinutes(60);
            DayButton.OnPressed += _ => AddMinutes(1440);
            WeekButton.OnPressed += _ => AddMinutes(10080);
            MonthButton.OnPressed += _ => AddMinutes(43200);
            // Command Buttons
            CaptainJobButton.OnPressed += _ => SetJobName("Captain");
            HOPJobButton.OnPressed += _ => SetJobName("HeadOfPersonnel");
            HOSJobButton.OnPressed += _ => SetJobName("HeadOfSecurity");
            CEJobButton.OnPressed += _ => SetJobName("ChiefEngineer");
            CMOJobButton.OnPressed += _ => SetJobName("ChiefMedicalOfficer");
            QMJobButton.OnPressed += _ => SetJobName("Quartermaster");
            RDJobButton.OnPressed += _ => SetJobName("ResearchDirector");
            // Security Buttons
            WardenJobButton.OnPressed += _ => SetJobName("Warden");
            OfficerJobButton.OnPressed += _ => SetJobName("SecurityOfficer");
            DetectiveJobButton.OnPressed += _ => SetJobName("Detective");
            CadetJobButton.OnPressed += _ => SetJobName("SecurityCadet");
            // Medical Buttons
            ChemistJobButton.OnPressed += _ => SetJobName("Chemist");
            DoctorJobButton.OnPressed += _ => SetJobName("MedicalDoctor");
            InternJobButton.OnPressed += _ => SetJobName("MedicalIntern");
            PsychologistJobButton.OnPressed += _ => SetJobName("Psychologist");
            // Engineering Buttons
            AtmosTechJobButton.OnPressed += _ => SetJobName("AtmosphericTechnician");
            EngineerJobButton.OnPressed += _ => SetJobName("StationEngineer");
            TechAssistJobButton.OnPressed += _ => SetJobName("TechnicalAssistant");
            // Juridical Buttons
            LawyerJobButton.OnPressed += _ => SetJobName("Lawyer");
            // Scientific Buttons
            ScientistJobButton.OnPressed += _ => SetJobName("Scientist");
            // Supply Buttons
            CargoTechJobButton.OnPressed += _ => SetJobName("CargoTechnician");
            SalvageSpecJobButton.OnPressed += _ => SetJobName("SalvageSpecialist");
            // Civilian Buttons
            ServiceWorkerJobButton.OnPressed += _ => SetJobName("ServiceWorker");
            BotanistJobButton.OnPressed += _ => SetJobName("Botanist");
            ChefJobButton.OnPressed += _ => SetJobName("Chef");
            BartenderJobButton.OnPressed += _ => SetJobName("Bartender");
            JanitorJobButton.OnPressed += _ => SetJobName("Janitor");
            ClownJobButton.OnPressed += _ => SetJobName("Clown");
            MimeJobButton.OnPressed += _ => SetJobName("Mime");
            ChaplainJobButton.OnPressed += _ => SetJobName("Chaplain");
            LibrarianJobButton.OnPressed += _ => SetJobName("Librarian");
            MusicianJobButton.OnPressed += _ => SetJobName("Musician");
        }

        private bool TryGetMinutes(string str, out uint minutes)
        {
            if(string.IsNullOrWhiteSpace(str))
            {
                minutes = 0;
                return true;
            }

            return uint.TryParse(str, out minutes);
        }

        private void SetJobName(string job)
        {
            JobNameLine.Text = job;

        }
        private void AddMinutes(uint add)
        {
            if (!TryGetMinutes(MinutesLine.Text, out var minutes))
                return;

            MinutesLine.Text = $"{minutes + add}";
            UpdateButtons(minutes+add);
        }

        private void UpdateButtonsText(LineEditEventArgs obj)
        {
            if (!TryGetMinutes(obj.Text, out var minutes))
                return;
            UpdateButtons(minutes);
        }

        private void UpdateButtons(uint minutes)
        {
            HourButton.Text = $"+1h ({minutes / 60})";
            DayButton.Text = $"+1d ({minutes / 1440})";
            WeekButton.Text = $"+1w ({minutes / 10080})";
            MonthButton.Text = $"+1M ({minutes / 43200})";
        }

        private void OnPlayerNameChanged()
        {
            SubmitButton.Disabled = string.IsNullOrEmpty(PlayerNameLine.Text);
        }

        private void OnRoleNameChanged()
        {
            SubmitButton.Disabled = string.IsNullOrEmpty(JobNameLine.Text);
        }

        public void OnPlayerSelectionChanged(PlayerInfo? player)
        {
            PlayerNameLine.Text = player?.Username ?? string.Empty;
            OnPlayerNameChanged();
        }

        private void SubmitButtonOnPressed(BaseButton.ButtonEventArgs obj)
        {
            IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand(
                $"roleban \"{PlayerNameLine.Text}\" \"{JobNameLine.Text}\" \"{CommandParsing.Escape(ReasonLine.Text)}\" {MinutesLine.Text}");
        }
    }
}
